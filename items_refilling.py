import telebot
from telebot import types
import sqlite3

# –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –±–æ—Ç–∞
admin_ids = [123456789, 987654321]

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('store.db')
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤
cursor.execute('''
    CREATE TABLE IF NOT EXISTS products (
        name TEXT,
        price REAL,
        description TEXT
    )
''')

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö –±–∞–ª–∞–Ω—Å—É
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance REAL
    )
''')

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
cursor.execute('''
    INSERT INTO products (name, price, description) VALUES (?, ?, ?)
''', ('‚úÖ115 VPüî•', 50, '‚ùóVP - —Ü–µ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –≤–∞–ª—é—Ç–∞ —É –≥—Ä—ñ Valorant, —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ–π –∫–æ–º–ø–∞–Ω—ñ—î—é Riot Games'))

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, ?)
''', (admin_ids[0], 1000))  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞


# –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π –¥–ª—è —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
# cursor.execute('''
#     INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, ?)
# ''', (user_id, initial_balance))

def get_products():
    cursor.execute('''SELECT name, price FROM products''')
    products = cursor.fetchall()
    return products


def get_user_balance(user_id):
    cursor.execute('''
        SELECT balance FROM users WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None


def update_user_balance(user_id, new_balance):
    cursor.execute('''
        UPDATE users SET balance = ? WHERE user_id = ?
    ''', (new_balance, user_id))
    conn.commit()

bot = telebot.TeleBot('YOUR_BOT_TOKEN')  # Replace 'YOUR_BOT_TOKEN' with your actual token

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message,
                 "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Å–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /topup –∞–±–æ –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑—ñ —Å–ø–∏—Å–∫—É /products.")


@bot.message_handler(commands=['topup'])
def topup_account(message):
    user_id = message.from_user.id

    if user_id not in admin_ids:
        bot.reply_to(message, "–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    markup = types.ForceReply(selective=False)
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É:", reply_markup=markup)


@bot.message_handler(commands=['balance'])
def check_balance(message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)

    if balance is not None:
        bot.reply_to(message, f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance}")
    else:
        bot.reply_to(message, "–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start –∞–±–æ /topup.")

# –Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏

if __name__ == "__main__":
    try:
        bot.polling(none_stop=True, interval=0, timeout=20, long_polling_timeout=5)
    except Exception as e:
        print(f"Error during polling: {e}")
